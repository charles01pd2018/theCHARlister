// dependencies
@use 'sass:map';
// constants 
@use '../constants/colors' as *;
@use '../constants/breakpoints' as *;
// utils
@use '../utils/color/getBackgroundColors' as *;


.tooltip-wrapper {
    $background: #fff;

    @include getBackgroundColors();
    position: absolute;
    padding: 5px 8px;
    background: $background;
    border-radius: 7px;
    width: max-content;
    box-shadow: 0px 0px 1.4px rgba(0, 0, 0, 0.017),
                0px 0px 3.8px rgba(0, 0, 0, 0.025),
                0px 0px 9px rgba(0, 0, 0, 0.033),
                0px 0px 30px rgba(0, 0, 0, 0.05);

    /* ANIMATIONS */
    &.slide {
        $transition: 0.21s ease;

        transition: opacity $transition,
                    visibility $transition,
                    transform $transition;
    }

    &.pop {
        $transition: 0.15s cubic-bezier(0.175, 0.885, 0.32, 1.275);

        &.active {
            transition-delay: 0.15s;
        }

        transition: opacity $transition,
                    visibility $transition,
                    transform $transition;
    }

    &.not-active {
        opacity: 0;
        visibility: hidden;
    }

    .tooltip {
        $pointer-size: 8px;

        display: flex;
        position: relative;

        .pointer {
            position: absolute;
            transform: translate( -50%, -50% );

            &.top,
            &.top-left,
            &.top-right {
                left: 50%;
                top: calc( 100% + $pointer-size );

                border-left: $pointer-size solid transparent;
                border-right: $pointer-size solid transparent;
                border-top: $pointer-size solid $background;

                @each $color, $color-map in $colors {
                    &.#{$color} {
                        border-top-color:  map.get( $color-map, 1 );
                    }
                }
            }

            &.bottom,
            &.bottom-left,
            &.bottom-right {
                left: 50%;
                top: -$pointer-size;

                border-left: $pointer-size solid transparent;
                border-right: $pointer-size solid transparent;
                border-bottom: $pointer-size solid $background;

                @each $color, $color-map in $colors {
                    &.#{$color} {
                        border-bottom-color:  map.get( $color-map, 1 );
                    }
                }
            }

            &.left {
                left: calc( 100% + $pointer-size );
                top: 50%;

                border-top: $pointer-size solid transparent;
                border-bottom: $pointer-size solid transparent;
                border-left: $pointer-size solid $background;

                @each $color, $color-map in $colors {
                    &.#{$color} {
                        border-left-color:  map.get( $color-map, 1 );
                    }
                }
            }

            &.right {
                top: 50%;
                left: -$pointer-size;

                border-top: $pointer-size solid transparent;
                border-bottom: $pointer-size solid transparent; 
                border-right: $pointer-size solid $background; 

                @each $color, $color-map in $colors {
                    &.#{$color} {
                        border-right-color:  map.get( $color-map, 1 );
                    }
                }
            }

            $pointer-shift: $pointer-size * 0.5;
            &.bottom-left,
            &.top-left {
                left: calc( 100% - $pointer-shift );
            }

            &.top-right,
            &.bottom-right {
                left: $pointer-shift;
            }

        }
    }

    /* POSITION */
    &.top,
    &.top-left,
    &.top-right {
        transform-origin: bottom;
    }

    &.bottom,
    &.bottom-left,
    &.bottom-right {
        transform-origin: top;
    }

    &.right {
        transform-origin: left;
    }

    &.left {
        transform-origin: right;
    }

    &.top,
    &.bottom,
    &.bottom-left,
    &.bottom-right,
    &.top-left,
    &.top-right {
        &.slide {
            &.not-active {
                transform: scaleY( 0.8 );
            }
        }

        &.pop {
            &.not-active {
                transform: translateY( -5% ) scale( 0.95 );
            }
        }
    }

    &.right,
    &.left {
        &.slide {
            &.not-active {
                transform: scaleX( 0.8 );
            }
        }

        &.pop {
            &.not-active {
                transform: translateY( 5% ) scale( 0.95 );
            }
        }
    }

    @media ( max-width: $breakpoint--small ) {
        display: none;
    }
}